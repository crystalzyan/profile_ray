Timer unit: 1e-06 s

Total time: 12.5534 s
File: ray_kernprof.py
Function: basic_set at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           @profile
     5                                           def basic_set(csvStr):
     6                                           	# Import CSV
     7         1      61944.0  61944.0      0.5  	ray_df = pd.read_csv(csvStr) 
     8         1          4.0      4.0      0.0  	ray_df2 = pd.read_csv(csvStr, 
     9         1      52905.0  52905.0      0.4           parse_dates=['tpep_pickup_datetime', 'tpep_dropoff_datetime'])
    10                                           
    11                                           	# Accesses
    12         1   11741360.0 11741360.0     93.5  	result = ray_df.head()
    13         1     697139.0 697139.0      5.6  	result2 = ray_df2.head()
    14                                           
    15         1          3.0      3.0      0.0  	return ray_df

Total time: 24.6705 s
File: ray_kernprof.py
Function: aggregation_set at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                           @profile
    19                                           def aggregation_set(ray_df):
    20                                           	# Convert and len
    21         1    3224305.0 3224305.0     13.1  	ray_df.tpep_pickup_datetime = pd.to_datetime(ray_df.tpep_pickup_datetime) 
    22         1         42.0     42.0      0.0  	result = len(ray_df)
    23                                           
    24                                           	# Groupby
    25         1   10883898.0 10883898.0     44.1  	ray_groupby = ray_df.groupby(ray_df.passenger_count)
    26                                           	# Ray does not support getting column from groupby below
    27                                           	# result = ray_groupby.trip_distance.mean()
    28                                           
    29                                           	# Filter, new column
    30         1    7507839.0 7507839.0     30.4  	ray_df2 = ray_df[(ray_df.tip_amount > 0) & (ray_df.fare_amount > 0)]
    31         1    3054406.0 3054406.0     12.4  	ray_df2["tip_fraction"] = ray_df2.tip_amount / ray_df2.fare_amount

Total time: 5.28931 s
File: ray_kernprof.py
Function: merge_set at line 39

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                           @profile
    40                                           def merge_set(ray_df):
    41                                           	# Merge
    42         1          7.0      7.0      0.0  	ray_payments = pd.DataFrame({'num':[1, 2, 3, 4, 5, 6], 
    43         1          2.0      2.0      0.0  	              'payment_name':['Credit Card', 'Cash', 'No Charge', 
    44         1      32800.0  32800.0      0.6  	                              'Dispute', 'Unknown', 'Voided trip']})
    45         1     712749.0 712749.0     13.5  	ray_df2 = ray_df.merge(ray_payments, left_on="payment_type", right_on="num")
    46                                           
    47                                           	# Groupby on Merge
    48         1    3656430.0 3656430.0     69.1  	ray2_groupby = ray_df2.groupby(ray_df2.payment_name)
    49                                           	# Ray does not support getting column from groupby below
    50                                           	# result = ray2_groupby.tip_amount.mean()
    51                                           
    52                                           	# Boolean correlation
    53         1     749341.0 749341.0     14.2  	ray_bool1 = ray_df2.tip_amount == 0
    54         1     113365.0 113365.0      2.1  	ray_bool2 = ray_df2.payment_name == 'Cash'
    55         1      24620.0  24620.0      0.5  	ray_bools = pd.concat([ray_bool1, ray_bool2], axis=1)

Total time: 1.74749 s
File: ray_kernprof.py
Function: shuffle_set at line 60

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    60                                           @profile
    61                                           def shuffle_set(ray_df):
    62                                           	# Shuffle and convert
    63         1    1029363.0 1029363.0     58.9  	ray_df = ray_df.set_index('tpep_pickup_datetime') 
    64         1     594695.0 594695.0     34.0  	ray_df.index = pd.to_datetime(ray_df.index)
    65                                           
    66                                           	# Accesses
    67         1      61282.0  61282.0      3.5  	result = ray_df.head()
    68         1      62147.0  62147.0      3.6  	result = ray_df.tail()

Total time: 3.38248 s
File: ray_kernprof.py
Function: timeseries_set at line 75

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    75                                           @profile
    76                                           def timeseries_set(ray_df):
    77                                           	# Shuffle and convert
    78         1    1338106.0 1338106.0     39.6  	ray_df = ray_df.set_index('tpep_pickup_datetime') 
    79         1     599758.0 599758.0     17.7  	ray_df.index = pd.to_datetime(ray_df.index)
    80                                           
    81                                           	# Resample
    82         1     848378.0 848378.0     25.1  	ray_resamp = ray_df.passenger_count.resample('1d')
    83         1     124315.0 124315.0      3.7  	ray_mn = ray_resamp.mean()
    84                                           
    85                                           	# Rolling aggregation
    86         1     387394.0 387394.0     11.5  	ray_roll = ray_df.passenger_count.rolling(10)
    87         1      84528.0  84528.0      2.5  	result = ray_roll.mean()
    
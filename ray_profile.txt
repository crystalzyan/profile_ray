Timer unit: 1e-06 s

Total time: 12.602 s
File: ray_kernprof.py
Function: basic_set at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           @profile
     5                                           def basic_set(csvStr, csvStr2):
     6                                           	# Import CSV
     7         1      64304.0  64304.0      0.5  	ray_df = pd.read_csv(csvStr) 
     8         1          4.0      4.0      0.0  	ray_df2 = pd.read_csv(csvStr2, 
     9         1      74150.0  74150.0      0.6           parse_dates=['tpep_pickup_datetime', 'tpep_dropoff_datetime'])
    10                                           
    11                                           	# Accesses
    12         1   11802772.0 11802772.0     93.7  	result = ray_df.head()
    13         1     660792.0 660792.0      5.2  	result2 = ray_df2.head()
    14                                           
    15         1          3.0      3.0      0.0  	return ray_df

Total time: 25.0915 s
File: ray_kernprof.py
Function: aggregation_set at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                           @profile
    19                                           def aggregation_set(ray_df):
    20                                           	# Convert and len
    21         1    3360925.0 3360925.0     13.4  	ray_df.tpep_pickup_datetime = pd.to_datetime(ray_df.tpep_pickup_datetime) 
    22         1         44.0     44.0      0.0  	result = len(ray_df)
    23                                           
    24                                           	# Groupby
    25         1   10853459.0 10853459.0     43.3  	ray_groupby = ray_df.groupby(ray_df.passenger_count)
    26                                           	# Ray does not support getting column from groupby below
    27                                           	# result = ray_groupby.trip_distance.mean()
    28                                           
    29                                           	# Filter, new column
    30         1    7967939.0 7967939.0     31.8  	ray_df2 = ray_df[(ray_df.tip_amount > 0) & (ray_df.fare_amount > 0)]
    31         1    2909125.0 2909125.0     11.6  	ray_df2["tip_fraction"] = ray_df2.tip_amount / ray_df2.fare_amount

Total time: 5.28998 s
File: ray_kernprof.py
Function: merge_set at line 39

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                           @profile
    40                                           def merge_set(ray_df):
    41                                           	# Merge
    42         1          7.0      7.0      0.0  	ray_payments = pd.DataFrame({'num':[1, 2, 3, 4, 5, 6], 
    43         1          3.0      3.0      0.0  	              'payment_name':['Credit Card', 'Cash', 'No Charge', 
    44         1      24405.0  24405.0      0.5  	                              'Dispute', 'Unknown', 'Voided trip']})
    45         1     783939.0 783939.0     14.8  	ray_df2 = ray_df.merge(ray_payments, left_on="payment_type", right_on="num")
    46                                           
    47                                           	# Groupby on Merge
    48         1    3483063.0 3483063.0     65.8  	ray2_groupby = ray_df2.groupby(ray_df2.payment_name)
    49                                           	# Ray does not support getting column from groupby below
    50                                           	# result = ray2_groupby.tip_amount.mean()
    51                                           
    52                                           	# Boolean correlation
    53         1     845427.0 845427.0     16.0  	ray_bool1 = ray_df2.tip_amount == 0
    54         1     104855.0 104855.0      2.0  	ray_bool2 = ray_df2.payment_name == 'Cash'
    55         1      48278.0  48278.0      0.9  	ray_bools = pd.concat([ray_bool1, ray_bool2], axis=1)

Total time: 1.82865 s
File: ray_kernprof.py
Function: shuffle_set at line 60

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    60                                           @profile
    61                                           def shuffle_set(ray_df):
    62                                           	# Shuffle and convert
    63         1    1118040.0 1118040.0     61.1  	ray_df = ray_df.set_index('tpep_pickup_datetime') 
    64         1     572063.0 572063.0     31.3  	ray_df.index = pd.to_datetime(ray_df.index)
    65                                           
    66                                           	# Accesses
    67         1      53337.0  53337.0      2.9  	result = ray_df.head()
    68         1      85215.0  85215.0      4.7  	result = ray_df.tail()

Total time: 3.26454 s
File: ray_kernprof.py
Function: timeseries_set at line 75

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    75                                           @profile
    76                                           def timeseries_set(ray_df):
    77                                           	# Shuffle and convert
    78         1    1316874.0 1316874.0     40.3  	ray_df = ray_df.set_index('tpep_pickup_datetime') 
    79         1     577949.0 577949.0     17.7  	ray_df.index = pd.to_datetime(ray_df.index)
    80                                           
    81                                           	# Resample
    82         1     781177.0 781177.0     23.9  	ray_resamp = ray_df.passenger_count.resample('1d')
    83         1      91496.0  91496.0      2.8  	ray_mn = ray_resamp.mean()
    84                                           
    85                                           	# Rolling aggregation
    86         1     386809.0 386809.0     11.8  	ray_roll = ray_df.passenger_count.rolling(10)
    87         1     110237.0 110237.0      3.4  	result = ray_roll.mean()

